//1 부모 클래스
package sec02;

public class Vehicle {
	// 리턴 x, 메소드
	public void run() {
		System.out.println("차량이 달립니다.");
	}
}

//2 Vehicle을 이용하는 클래스
package sec02;

public class Driver {
// 리턴 타입x, 클래스 타입의 매개변수가 있는 메소드
	public void drive(Vehicle vehicle) {
		vehicle.run();
	}
}

//3 자식 클래스
package sec02;

public class Bus extends Vehicle{
	
	// 부모 클래스의 run 메소드 오버라이드(재정의)
	@Override
	public void run() {
		System.out.println("버스가 달립니다.");
	}
	
	
}

//4 자식 클래스
package sec02;

public class Taxi extends Vehicle{
	
	// 부모 클래스의 run 메소드 오버라이드(재정의)
	@Override
	public void run() {
		System.out.println("택시가 달립니다.");
	}
	
	
}

//5 실행 클래스
package sec02;

public class DriverExample {

	public static void main(String[] args) {
		
		Driver driver = new Driver();   // Driver 클래스 객체 생성
		Bus bus = new Bus();			// Bus 클래스 객체 생성
		Taxi taxi = new Taxi();			// Taxi 클래스 객체 생성
		
		bus.run();
		taxi.run();
		
		// driver.drive();   drive 메소드는 매개변수가 있어야 함
		
		driver.drive(bus);   // 클래스 타입의 매개변수 추가함
		// -> 16라인의 출력 내용은 Bus 객체의  run() 메소드를 실행한 결과
		
		driver.drive(taxi);  // 자동 타입 변환: Vehicle vehicle = taxi;
		// -> 19라인의 출력 내용은 Taxi 객체의  run() 메소드를 실행한 결과
		
		// 출력결과
		//버스가 달립니다.
		//택시가 달립니다.
		//버스가 달립니다.
		//택시가 달립니다.	
	}

}
----------------------------------------------------------------------------------------
  //6 부모
  package sec02.exam05;

public class Phone {
	
	String company; // 제조 회사
	int cost=100000;       // 가격
	String color;   // 색상
	
	void ring() {
		System.out.println("전화가 울립니다");
	}
	
	void powerOn() {
		System.out.println("전원이 켜집니다");
	}
	
	void powerOff() {
		System.out.println("전원이 꺼집니다");
	}
	
}

//7 자식
package sec02.exam05;

public class SmartPhone extends Phone {
	boolean touch;
	String Camera;
	String Phonecase;
	String protectedFilm;
	int cost=200000; 
	
	@Override
	void ring() {
		System.out.println("스마트폰이 울립니다");
	}
	
	void videoOn() {
		System.out.println("동영상을 촬영합니다");
	}
	
	void CameraOn() {
		System.out.println("사진을 촬영합니다");
	}
	
}

//8 
package sec02.exam05;

public class PhoneExample {
	
	public static void main(String[] args) {
		
		//SmartPhone sp = new SmartPhone();  // 기본 객체 생성은 본인 것을 갖고옴
		//System.out.println(sp.cost); // SmartPhone 본인 호출
		
		Phone p = new SmartPhone();
		// 자식 개체를 부모 객체에 타입 변환 시킴 (자동변환)
		System.out.println(p.cost);
		p.powerOn();
		p.ring();  // 오버라이드 메소드 호출
		// p.videoOn();  // 자식 클래스 메소드 호출 안됨
		// p.PhoneCase="하드케이스";  // 자식 클래스 필드 사용 안됨
		
		SmartPhone sp = (SmartPhone)p;
		// 부모 객체를 자식 객체에 강제 타입 변환 시킴
		sp.Phonecase="소프트케이스"; // 자식 객체 필드나 메소드 사용 가능
		sp.powerOn();				 // 부모 객체 메소드 사용 가능, 상속 받았기 때문
		System.out.println(sp.cost); // 200000 출력, 같은 이름의 필드는 자식 객체 출력
		
		//Phone p2 = new Phone();          // 자식 타입이 부모 타입으로 변환하지 않은 상태에서 
		//SmartPhone sp2 = (SmartPhone)p2; // 부모 타입을 자식 타입으로 강제 변환은 되지 않음
	
		//출력결과
		//100000
		//전원이 켜집니다
		//스마트폰이 울립니다
		//전원이 켜집니다
		//200000		
	}
}
----------------------------------------------------------------------------------------
//9 부모
  package sec02.exam06;

public class Parent {

}

//10 자식
package sec02.exam06;

public class Child extends Parent {

}
// 11 실행
package sec02.exam06;

public class InstanceofExample {

	public static void main(String[] args) {
		Parent parentA = new Child();
		method1(parentA);  
		
		Parent parentB = new Parent();
		method1(parentB); 
	}

	public static void method1(Parent parent) {

		if (parent instanceof Child) {
			Child child = (Child) parent;
			System.out.println("강제 변환 성공");
		} else {
			System.out.println("강제 변환 실패");
		}

	}
}
----------------------------------------------------------------------------------------
