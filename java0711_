//1 부모 클래스
package sec01;

public class CellPhone {
	// 필드
	// private String model; !! private 붙으면 상속 불가능!! -> 외부에서 바로 접근 불가능 
	// -> getter,setter 이용해서 접근
	String model;
	String color;

	// 생성자 -> 컴퓨터가 자동으로 디폴드 생성자 만듦 (눈에 안보임)

	// 메소드
	// default 접근제한: 같은 패키지에서는 아무런 제한 없이 생성자를 호출 가능
	void powerOn() {
		System.out.println("전원을 켭니다.");
	}

	void powerOff() {
		System.out.println("전원을 끕니다.");
	}

	void Bell() {
		System.out.println("벨이 울립니다.");
	}

	void sendVoice(String message) {
		System.out.println("자기: " + message);
	}

	void receiveVoice(String message) {
		System.out.println("상대방: " + message);
	}

	void hangUp() {
		System.out.println("전화를 끊습니다.");
	}

}

//2 자식 클래스
package sec01;

public class DmbCellPhone extends CellPhone {
	
	// 멤버 필드
	int channel;  
	
	//생성자
	DmbCellPhone (String model, String color, int channel) {
		this.model = model;   // CellPhone 클래스로부터 상속받은 필드
		this.color = color;   // CellPhone 클래스로부터 상속받은 필드
		this.channel = channel;		
	}
	
	//메소드
	void turnOnDmb() {
		System.out.println("채널 " + channel +"번 DB 방송 수신을 시작합니다.");
	}
	void changeChannelDmb(int channel) {
		this.channel = channel;
		System.out.println("채널 " + channel + "번으로 바꿉니다.");
	}
	
	void turnOffDmb() {
		System.out.println("DMB 방송 수신을 멈춥니다.");
	}
}

//3 자식 클래스 사용
package sec01;

public class DmbCellPhoneExample {

	public static void main(String[] args) {
		
		//DmbCellPhone 객체 생성
		DmbCellPhone dmbcellPhone = new DmbCellPhone("자바폰","검정", 10);
		
		//CellPhone 클래스로부터 상속받은 필드를 출력
		System.out.println("모델: " + dmbcellPhone.model);  
		System.out.println("색상: " + dmbcellPhone.color); 
		
		//DmbCellPhone 클래스의 필드를 출력
		System.out.println("채널: " + dmbcellPhone.channel);
		
		//CellPhone 클래스로부터 상속받은 메소드를 호출
		dmbcellPhone.powerOn();
		dmbcellPhone.Bell();
		dmbcellPhone.sendVoice("안녕");
		dmbcellPhone.receiveVoice("안녕하세요.");
		dmbcellPhone.hangUp();
		
		//DmbCellPhone (본인)클래스의 메소드 호출
		dmbcellPhone.turnOnDmb();
		dmbcellPhone.changeChannelDmb(30);
		dmbcellPhone.turnOffDmb();
	}

}
----------------------------------------------------------------------------------
//4 부모 클래스
package sec01;

public class People {  // 부모 People 클래스

	public String name; // 이름
	public String ssn; // 주민번호

	// 기본 생성자가 없고 
	// name과 ssn을 매개값으로 받아 객체를 생성시키는 생성자만 있음 (매개변수 2개짜리)
	
	public People(String name, String ssn) {
		this.name = name;
		this.ssn = ssn;
	}
	
	// 그렇기 때문에 People을 상속하는 Student 클래스는
	// 생성자에서 super(name,ssn)으로 People 클래스의 생성자를 호출해야 함
}

//5 자식 클래스
package sec01.exam02;

import sec01.People;

public class Student extends People {
	public int studentNo;   // 학번
	
	public Student(String name, String ssn, int studentNo) {
		super(name, ssn);   //(매개변수 2개짜리) 부모 생성자 호출!!
		this.studentNo = studentNo;  
	}
}

//6 자식 객체 실행 (자식 클래스 사용)
package sec01.exam02;

public class StudentExample {

	public static void main(String[] args) {
		
		Student student = new Student("홍길동", "123456-1234567", 1);
		
		System.out.println(student.name); // 부모에게 상속받은 필드 출력
		System.out.println(student.ssn);  // 부모에게 상속받은 필드 출력
		System.out.println(student.studentNo); // 본인 필드 출력
		
		// 출력내용
		// 홍길동
		// 123456-1234567
		// 1
	}

}
----------------------------------------------------------------------------------
//7 부모 클래스
package sec01.exam02;

public class Calculator {
	
	double areaCircle(double r) {
		System.out.println("Calculator의 areaCircle() 실행");
		return 3.14159 * r * r;
	}
}

//8 자식 클래스 (오버라이딩!!)
package sec01.exam02;

public class computer2 extends Calculator {

	@Override
	double areaCircle(double r) {
		System.out.println("Computer2의 areaCircle() 실행");
		return Math.PI * r * r;
	}

}
//9 메소드 재정의 테스트
package sec01.exam02;

public class ComputerExample {

	public static void main(String[] args) {
		
		int r = 10;
		
		Calculator calculator = new Calculator();   // 부모
		System.out.println("원의 면적: " + calculator.areaCircle(r));
		System.out.println();
		
		computer2 computer = new computer2();		// 자식
		System.out.println("원의 면적: " + computer.areaCircle(r)); // 자식 클래스에서 재정의된 메소드를 호출
		System.out.println();
		
		//출력결과
		//Calculator의 areaCircle() 실행
		//원의 면적: 314.159

		//Computer2의 areaCircle() 실행
		//원의 면적: 314.1592653589793

	}
}
----------------------------------------------------------------------------------
//10 부모 클래스
package sec01;

public class AirPlane {
	
	// 메소드
	// 매개변수도, (void 사용) 리턴값도 없어 바로 호출하고 끝남
	public void land() {
		System.out.println("착륙합니다.");
	}

	public void fly() {
		System.out.println("일반비행합니다");
	}

	public void takeOff() {
		System.out.println("이륙합니다");
	}

}

//11 자식 클래스 (super 변수 사용!! - 부모 메소드 호출)
package sec01;

public class SupersonicAirplane extends AirPlane {

	// 정적 상수 2개 생성, 상수 이름은 관례적으로 대문자를 씀
	public static final int NORMAL = 1;
	public static final int SUPERSONIC = 2;

	public int flyMode = NORMAL;

	@Override
	public void fly() {
		if (flyMode == SUPERSONIC) {
			System.out.println("초음속비행합니다.");
		} else {
			super.fly(); // 부모 (AirPlane) 클래스의 fly() 메소드 호출
		}
	}

}

//12 자식 실행 클래스
package sec01;

public class SupersonicAirplaneExample {

	public static void main(String[] args) {

		SupersonicAirplane sa = new SupersonicAirplane();

		sa.takeOff(); // 부모 클래스 메소드 호출 - 이륙합니다
		sa.fly(); // 일반비행합니다
		sa.flyMode = SupersonicAirplane.SUPERSONIC;
		sa.fly(); // 초음속비행합니다
		sa.flyMode = SupersonicAirplane.NORMAL;
		sa.fly(); // 일반비행합니다
		sa.land(); // 부모 클래스 메소드 호출 - 착륙합니다

		// 출력 결과

		// 이륙합니다
		// 일반비행합니다
		// 초음속비행합니다.
		// 일반비행합니다
		// 착륙합니다.

	}

}
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
----------------------------------------------------------------------------------
//13 부모 클래스
package sec01;

public class Human {
	int weight;      // 몸무게
	int height;		 // 키
	String gender;   // 성별
	
//	Human() {
//		
//	}
	Human(int weight, int height) {
		this.weight = weight;
		this.height = height;
	}
	
	void sleep() {System.out.println("잠이 듭니다");}
	void awake() {System.out.println("일어납니다");}
	
	// Student 에서 오버라이딩 할거임
	String eat(String food) {
		String result = food +"을 먹습니다.";
		return result;			
	}
	
	String run(int speed) {
		String result = speed+ "속도로 달립니다.";
		return result;
	}
}

//14 자식 클래스
package sec01;

public class Student extends Human {
	
	int studentCode;     // 학번
	String studentDept;  // 학과

	Student(int weight, int height, int studentCode) {
		super(weight, height);
		this.studentCode = studentCode;
	}
	
//	Student(int studentCode, String gender, int height) {
//		this.studentCode = studentCode;
//		this.gender = gender; // Human으로부터 상속받은 필드
//		this.height = height; // Human으로부터 상속받은 필드
//	}
	
	//메소드 
	void study(String place) {   // 리턴값 없이 출력만 하고 끝남
		System.out.println(place + "에서 공부합니다.");
	}
	
	void dressOn() {
		System.out.println("교복을 입습니다.");
	}
	
	void dressOff() {
		System.out.println("교복을 벗어요.");
	}
	
	//Human의 eat 메소드 오버라이딩
	@Override
	String eat(String food) {
		String result = food + "를 매일 먹어요";
		return result;
	}	
}

//15 자식 실행 클래스
package sec01;

public class 학생실행구문 {

	public static void main(String[] args) {
		
		Student s = new Student(80, 190, 1234);
		String result = s.eat("피자");
		System.out.println(result);
		System.out.println(s.eat("돈가스")); // 이렇게 쓰면 바로 출력도 가능

		// 출력 결과
		// 피자를 매일 먹어요
		// 돈가스를 매일 먹어요

	}

}
----------------------------------------------------------------------------------


